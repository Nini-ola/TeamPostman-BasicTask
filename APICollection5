{
	"info": {
		"_postman_id": "7fec36d7-eda2-4c4c-895b-7b4414272bc7",
		"name": "APICollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get All Entries",
			"item": [
				{
					"name": "Get All Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"/**pm.test(\"Your test name\", function () {\r",
									"    pm.expect(jsonData.value).to.eql(100);\r",
									" */\r",
									"\r",
									"/** pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");\r",
									"});\r",
									"*/"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}",
							"host": [
								"{{baseurl}}"
							]
						},
						"description": "https://demo.fusio-project.org/index.php/"
					},
					"response": []
				},
				{
					"name": "Get All Todo Entries",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"console.log(jsonData.entry[10].id)",
									"console.log(jsonData.entry[1].title)",
									"",
									"pm.environment.set(\"entityId\", jsonData.entry[10].id);",
									"pm.environment.set(\"entityTitle\", jsonData.entry[1].title)",
									"",
									"pm.test(\"Status code Should be 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Status code name should have an OK string\", function () {",
									"    pm.response.to.have.status(\"OK\");",
									"});",
									"",
									"console.log(jsonData)",
									"console.log(jsonData.totalResults)",
									"console.log(jsonData.entry[14].title)",
									"console.log(jsonData.entry[7].status)",
									"",
									"pm.test(\"Confirm that total Results is 31\", function () {",
									"    pm.expect(jsonData.totalResults).to.eql(\"31\");",
									"});",
									"",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"31\");",
									"});",
									"",
									"pm.test(\"Confirm that entry 14 contains Task 15\", function () {",
									"    pm.expect(jsonData.entry[14].title).to.eql(\"Task 15\");",
									"});",
									"",
									"pm.test(\"Confirm that Task 1 is present\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"Task 1\");",
									"});",
									"",
									"pm.test(\"Confirm that entry with Task 11 title has an ID equal 11\", function () {",
									"    pm.expect(jsonData.entry[10].id).to.eql(\"11\");",
									"});",
									"/**",
									" * pm.test(\"Your test name\", function () {",
									"    pm.expect(jsonData.value).to.eql(100);",
									"});",
									"pm.test(\"Body matches string\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"string_you_want_to_search\");",
									"});",
									" * ",
									" */"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseurl}}/todo",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"todo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get entry per ID",
			"item": [
				{
					"name": "Get entry per ID - Valid ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData.entry[10].id)\r",
									"\r",
									"pm.environment.set(\"entityId\", jsonData.entry[10].id);\r",
									"\r",
									"pm.test(\"Status code Should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/todo/?todo_id={{entityId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"todo",
								""
							],
							"query": [
								{
									"key": "todo_id",
									"value": "{{entityId}}"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				},
				{
					"name": "Get entry per ID - Invalid ID(params not using TODO ID)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"console.log(jsonData.entry[10].id)\r",
									"\r",
									"pm.environment.set(\"entityId\", jsonData.entry[10].id);\r",
									"\r",
									"pm.test(\"Status code Should be 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurl}}/todo/?todo_id={{entityId}}",
							"host": [
								"{{baseurl}}"
							],
							"path": [
								"todo",
								""
							],
							"query": [
								{
									"key": "todo_id",
									"value": "{{entityId}}"
								}
							]
						},
						"description": "https://demo.fusio-project.org/index.php/todo/:todo_id"
					},
					"response": []
				}
			]
		},
		{
			"name": "Get Books",
			"item": [
				{
					"name": "Get All Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"// print any kind of variables/message on the screen\r",
									"console.log(response[1].id);\r",
									"pm.environment.set(\"JustMeID\", response[1].id);\r",
									"\r",
									"console.log(response[2].name);\r",
									"\r",
									"pm.test(\"Search for a book name called Viscount Who Loved Me\", function (){\r",
									"    pm.expect(response[5].name).to.eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"/*const Fiction = response.filter((book) => book.type === \"fiction\");\r",
									"console.log(Fiction)\r",
									"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
									"\r",
									"const Fiction = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"Viscount Who Loved Me\")\r",
									"\r",
									"console.log(Fiction[0].id);\r",
									"\r",
									"pm.test(\"The id number of a fiction book that available with the name The Midnight Library is \" , function () {\r",
									"    pm.expect(Fiction[0].name).eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"pm.globals.set(\"bookId\", Fiction[0].id);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurlbooks}}/books",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"books"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books - valid book type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response[2].type);\r",
									"\r",
									"pm.test(\"Search for a book name called Viscount Who Loved Me\", function (){\r",
									"    pm.expect(response[3].name).to.eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"const Fiction = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"The Midnight Library\")\r",
									"\r",
									"console.log(Fiction[0].id);\r",
									"\r",
									"pm.test(\"The id number of a fiction book that available with the name The Midnight Library is \" , function () {\r",
									"    pm.expect(Fiction[0].name).eql(\"The Midnight Library\")\r",
									"});\r",
									"\r",
									"pm.globals.set(\"bookId\", Fiction[0].id);\r",
									"\r",
									"\r",
									"/*const Fiction = response.filter((book) => book.type === \"fiction\");\r",
									"console.log(Fiction)\r",
									"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurlbooks}}/books?type=fiction",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "fiction"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Books - invalid book type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const response = pm.response.json();\r",
									"\r",
									"console.log(response[2].type);\r",
									"\r",
									"pm.test(\"Search for a book name called Viscount Who Loved Me\", function (){\r",
									"    pm.expect(response[3].name).to.eql(\"Viscount Who Loved Me\")\r",
									"});\r",
									"\r",
									"const Fiction = response.filter((book) => book.type === \"fiction\" && book.available === true && book.name === \"The Midnight Library\")\r",
									"\r",
									"console.log(Fiction[0].id);\r",
									"\r",
									"pm.test(\"The id number of a fiction book that available with the name The Midnight Library is \" , function () {\r",
									"    pm.expect(Fiction[0].name).eql(\"The Midnight Library\")\r",
									"});\r",
									"\r",
									"pm.globals.set(\"bookId\", Fiction[0].id);\r",
									"\r",
									"\r",
									"/*const Fiction = response.filter((book) => book.type === \"fiction\");\r",
									"console.log(Fiction)\r",
									"//Print out the id of a fiction book that is available called \"The Midnight Library\"*/\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseurlbooks}}/books",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"books"
							],
							"query": [
								{
									"key": "type",
									"value": "romance",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Place a book order",
			"item": [
				{
					"name": "Place a book order - using valid book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code should be 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"const OrderId = pm.response.json();\r",
									"\r",
									"console.log(OrderId.orderId);\r",
									"pm.environment.set(\"OrderId\", OrderId.orderId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": {{JustMeID}},\n  \"customerName\": \"Nini\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a book order - using invalid book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const OrderId = pm.response.json();\r",
									"\r",
									"console.log(OrderId.orderId);\r",
									"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": 150,\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Place a book order - using no book ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const OrderId = pm.response.json();\r",
									"\r",
									"console.log(OrderId.orderId);\r",
									"\r",
									"pm.test(\"The id number of a fiction book that available with the name The Midnight Library is\", function () {\r",
									"    pm.expect(OrderId.orderId[0].name).eql(\"The Midnight Library\")\r",
									"});\r",
									"\r",
									"pm.globals.set(\"OrderId\", OrderId.orderId);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"bookId\": \n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get all orders",
			"item": [
				{
					"name": "Get all orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Get an order",
			"item": [
				{
					"name": "Get an order - using a valid order number",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders/:orderId",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "1B2MxfZFLWpatDgkkN6l3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order - using an invalid order number",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders/:orderId",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "adeyi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an order - using no order ID",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"customerName\": \"John\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders/:orderId",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete an order",
			"item": [
				{
					"name": "Delete an order - using valid order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string OK\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders/:orderId",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "bl8ZbxUCq59bH8DyYWvjo"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order - using invalid order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string OK\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders/:orderId",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "adeyi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete an order - using no order ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string OK\", function () {\r",
									"    pm.response.to.have.status(\"No Content\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "03c5abfe090876ab74a2a2ac4c079174a35fd88c9b88cd2164ff4b9d56c31d6c",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseurlbooks}}/orders/:orderId",
							"host": [
								"{{baseurlbooks}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": ""
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}